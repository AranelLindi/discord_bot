Dieses Textfile enthält lediglich Python Code aus Discord Bot Tutorials und 
wird noch untersucht bevor es aus diesem File komplett entfernt wird.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


# Was macht das?

# @bot.command()
# async def clean(ctx, *, content: commands.clean_content(use_nicknames=False)):
#    await ctx.send(content)


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


# ############################################## DAS STAMMT NOCH AUS EINEM TUTORIAL! UNTERSUCHEN!
# Extra Klassen für darauf folgendes Command
# sofern möglich, die Klasse in extra Datei auslagern! (Das funktioniert über Cogs!)
class JoinDistance:
    def __init__(self, joined, created):
        self.joined = joined
        self.created = created

    @property
    def delta(self):
        return self.joined - self.created


class JoinDistanceConverter(commands.MemberConverter):
    async def convert(self, ctx, argument):
        member = await super().convert(ctx, argument)
        return JoinDistance(member.joined_at, member.created)


@bot.command()
async def delta(ctx, *, member: JoinDistanceConverter):
    is_new = member.delta.days < 100
    if is_new:
        await ctx.send("Hey you're pretty new!")
    else:
        await ctx.send("Hm you're not so new.")


@bot.command()
async def joined(ctx, *, member: discord.member):
    await ctx.send('{0} joined on {0.joined_at}'.format(member))
# ##############################################



$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$



#
#
# ##############################################
# -----------MÜLLHAUFEN-(RECYCELBAR!)-----------
# ##############################################
# Event on_message wird für jede eingehende Nachricht gefeuert
# @bot.event
# async def on_message(message):
    # await message.channel.send(message.author.id)
    # if message.author == client.user: # soll verhindern, dass der Bot auf Messages von sich selbst reagiert
    #    return

    # Prüfen ob die Nachricht mit einem bestimmten Schlüsselwort beginnt:
    # if message.content.startswith('Hallo'):
    # await message.channel.send(f'Hallo {message.author.id}!')

#    if message.content.startswith('Tutorial'):
#        await message.channel.send("Hallo Welt!")

#    if message.content.startswith('oder LindBot?'):
#        await message.channel.send('Ja, du hast recht!')

# @client.event
# async def on_member_join():

# @bot.command(pass_context=True)
# async def join(ctx):
#    author = ctx.message.author
#    channel = author.voice_channel
#    await channel.connect()
    # await bot.join(channel)


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$



# @bot.command()
# async def leave(ctx):
#    await ctx.voice_client.disconnect()